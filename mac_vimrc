set t_Co=256
set encoding=utf-8
" set fileencoding=utf-8
set number
set cursorline
" set cursorcolumn
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab smarttab

" set hightlight search
set hlsearch
set foldmethod=indent
syntax on
" set backspace
set backspace=indent,eol,start
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

let mapleader=','
" save file in both insert mode and normal mode
inoremap <leader>w <Esc>:w<cr>
noremap <leader>w :w<cr>
" map <Esc> to jj
" leave insert mode to normal mode
inoremap jj <Esc>

" use ctrl+h/j/k/l to switch window
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

com! FormatJSON %!python3 -m json.tool


" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" start screen
Plug 'mhinz/vim-startify'
" status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" indentline
Plug 'Yggdroot/indentLine'
" color scheme
"Plug 'w0ng/vim-hybrid'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
" file tree
Plug 'scrooloose/nerdtree'
" git plugin
Plug 'tpope/vim-fugitive'
" shows the lines modified, add, remove
" works only for file within git track
Plug 'airblade/vim-gitgutter'
" git commit browser. use :GV to open commit browser
Plug 'junegunn/gv.vim'
" syntax checking and semantic errors
Plug 'w0rp/ale'
" autoformat code
Plug 'Chiel92/vim-autoformat'
" align the text
Plug 'junegunn/vim-easy-align'
" comment more easy
Plug 'scrooloose/nerdcommenter'
" tag bar for variables, class, functions
Plug 'majutsushi/tagbar'
" highlight different words
Plug 'lfv89/vim-interestingwords'
" underline current word
Plug 'itchyny/vim-cursorword'
" auto complete code
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
" rainbow parenthese
Plug 'luochen1990/rainbow'
" syntax highlighting, basic indentation, Syntastic support
" Plug 'udalov/kotlin-vim'
Plug 'sheerun/vim-polyglot'
" auto pair
Plug 'jiangmiao/auto-pairs'
" manipulate surroundings: parenthese, brackets, quotes, xml tags
Plug 'tpope/vim-surround'
" locating files, buffers, mrus, ctags, gtags, etc. in large project.
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" bookmarks for quick jump
Plug 'MattesGroeger/vim-bookmarks'
" auto detect and set file encoding
Plug 's3rvac/AutoFenc'
" add icon
Plug 'ryanoasis/vim-devicons'
" Initialize plugin system
call plug#end()

" ========config plugins======
" set airline color scheme
let g:airline_theme='onehalfdark'

" set color scheme
set background=dark
colorscheme onehalfdark
" hightlight current line number color
highlight CursorLineNr gui=bold guifg=Cyan
" highlight LineNr guifg=grey guibg=grey25

" set special char to hightlight
set list
set listchars=tab:→\ ,space:·
" ,trail:␣
highlight SpecialKey guifg=Grey30

" config indentline
"let g:indentLine_setColors = 239
" let g:indentLine_leadingSpaceEnabled = 1
" let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_setConceal = 2
" default ''.
" n for Normal mode
" v for Visual mode
" i for Insert mode
" c for Command line editing, for 'incsearch'
let g:indentLine_concealcursor = ""


if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

" config nerd tree
" show file tree
noremap <leader>g :NERDTreeToggle<cr> "
" show current file in file tree
noremap <leader>v :NERDTreeFind<cr> "

" config gitgutter
let g:gitgutter_terminal_reports_focus=0
"gitgutter update every 300ms
set updatetime=300

" config autoformat
noremap <leader>f :Autoformat<cr>

" config easy align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" when use it,
" 1. select content then ga then character
" 2. ga then choose content then character
" eg. vipga=
"         visual-select inner paragraph
"         Start EasyAlign command (ga)
"         Align around =
"     gaip=
"         Start EasyAlign command (ga) for inner paragraph
"         Align around =


" config nerd commenter
" default <leader>ci comment a line
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" config tagbar
noremap <leader>t :TagbarToggle<cr>
"set tags=./tags;$HOME
set tags=./tags,tags;/

" config interestingwords
" noremap <leader>k  highlight
" noremap <leader>K  undo highlight
" navigate with n and N

" config coc
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" config rainbow
" set to 0 if you want to enable it later via :RainbowToggle
let g:rainbow_active = 1
